"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _loaderUtils = require("@loaders.gl/loader-utils");

var _fuzzy = require("fuzzy");

var _react = _interopRequireWildcard(require("react"));

var _icons = require("../common/icons");

var _customPanelStyle = _interopRequireDefault(require("./custom-panel-style.js"));

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// import logopro from './logopro.png';
// This is a dummy component that can be replaced to inject more side panel sub panels into the side bar
function CustomPanelsFactory() {
  var CustomPanels = function CustomPanels(props) {
    var filterTypes = [{
      index: 0,
      columnName: 'Tc1'
    }, {
      index: 1,
      columnName: 'Tc2'
    }, {
      index: 2,
      columnName: 'Tc3'
    }, {
      index: 3,
      columnName: 'Tc4'
    }, {
      index: 4,
      columnName: 'Tc5'
    }, {
      index: 5,
      columnName: 'Tc6'
    }, {
      index: 6,
      columnName: 'disciplines'
    }, {
      index: 7,
      columnName: 'Category'
    }, {
      index: 8,
      columnName: 'yearTS'
    }];
    var TC1 = filterTypes[0],
        TC2 = filterTypes[1],
        TC3 = filterTypes[2],
        TC4 = filterTypes[3],
        TC5 = filterTypes[4],
        TC6 = filterTypes[5],
        DICIPLINES = filterTypes[6],
        CATEGORY = filterTypes[7],
        TIMELINE = filterTypes[8];
    var setFilter = props.setFilter,
        addFilter = props.addFilter,
        removeFilter = props.removeFilter,
        datasets = props.datasets,
        enlargeFilter = props.enlargeFilter,
        layerConfigChange = props.layerConfigChange,
        layers = props.layers;

    var _useState = (0, _react.useState)([]),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        selectedFilters = _useState2[0],
        setSelectedFilters = _useState2[1];

    var filters = [{
      label: 'Timeline',
      keyword: 'yearTS',
      type: TIMELINE
    }, {
      label: 'TC1',
      keyword: 'y',
      type: TC1
    }, {
      label: 'TC2',
      keyword: 'y',
      type: TC2
    }, {
      label: 'TC3',
      keyword: 'y',
      type: TC3
    }, {
      label: 'TC4',
      keyword: 'y',
      type: TC4
    }, {
      label: 'TC5',
      keyword: 'y',
      type: TC5
    }, {
      label: 'TC6',
      keyword: 'y',
      type: TC6
    }, {
      label: 'Literature',
      keyword: 'Literature',
      type: DICIPLINES
    }, {
      label: 'Music',
      keyword: 'Music',
      type: DICIPLINES
    }, {
      label: 'Visual Arts',
      keyword: 'Visual Arts',
      type: DICIPLINES
    }, {
      label: 'Performing Arts',
      keyword: 'Performing Arts',
      type: DICIPLINES
    }, {
      label: 'Multidisciplinary',
      keyword: 'Multidisciplinary',
      type: DICIPLINES
    }, {
      label: 'Architecture',
      keyword: ' Architecture ',
      type: DICIPLINES
    }, {
      label: '1',
      keyword: 'a',
      type: CATEGORY
    }, {
      label: '2',
      keyword: 'b',
      type: CATEGORY
    }, {
      label: '3',
      keyword: 'c',
      type: CATEGORY
    }, {
      label: '4',
      keyword: 'd',
      type: CATEGORY
    }, {
      label: '5',
      keyword: 'e',
      type: CATEGORY
    }];
    (0, _react.useEffect)(function () {
      // Agrega los filtros al iniciar
      filterTypes.forEach(function () {
        addFilter(Object.keys(datasets)[0]);
      }); // Se inicializa este layer con visible false para los related links

      layerConfigChange(layers[2], {
        isVisible: false
      });
    }, []);
    (0, _react.useEffect)(function () {
      // Agrega los filtros de tipo keyword
      filterTypes.forEach(function (filterType) {
        if (filterType.columnName == TIMELINE.columnName) return;
        var keywords = selectedFilters.filter(function (f) {
          return f.type.columnName == filterType.columnName;
        }).map(function (f) {
          return f.keyword;
        });
        setFilter(filterType.index, 'name', "".concat(filterType.columnName));
        setFilter(filterType.index, 'value', keywords);
      }); // Agrega los filtros de tipo TIMELINE

      selectedFilters.filter(function (f) {
        return f.type.columnName == TIMELINE.columnName;
      }).forEach(function (_ref) {
        var keyword = _ref.keyword;
        setFilter(TIMELINE.index, 'name', keyword);
      });
    }, [selectedFilters]);

    var removeFilters = function removeFilters() {
      setSelectedFilters([]);
      removeFilter(TIMELINE.index);
      addFilter(Object.keys(datasets)[0]);
    };

    var Button = function Button(filter) {
      var keyword = filter.keyword,
          label = filter.label,
          type = filter.type;
      var buttonStyle = selectedFilters.find(function (f) {
        return f.keyword == keyword && f.type.columnName == type.columnName;
      }) ? _customPanelStyle["default"].button.selected : _customPanelStyle["default"].button;

      var action = function action() {
        var filterIndex = selectedFilters.findIndex(function (f) {
          return f.keyword == keyword && f.type.columnName == type.columnName;
        });

        if (filterIndex > -1) {
          var tcFilter = function tcFilter(f) {
            return f.type.columnName !== type.columnName;
          };

          var othersFilter = function othersFilter(f) {
            return f.keyword !== keyword;
          };

          var newFilters = selectedFilters.filter(type.columnName.startsWith('Tc') ? tcFilter : othersFilter);

          if (!newFilters.length) {
            removeFilters();
          } else {
            setSelectedFilters(newFilters);
          }
        } else {
          setSelectedFilters([].concat((0, _toConsumableArray2["default"])(selectedFilters), [filter]));
        }

        if (type.columnName == TIMELINE.columnName) {
          enlargeFilter(TIMELINE.index);
        }
      };

      return /*#__PURE__*/_react["default"].createElement("button", {
        style: buttonStyle,
        key: "".concat(keyword, "_").concat(type.columnName),
        onClick: action
      }, label);
    };

    var ToggleButton = function ToggleButton(_ref2) {
      var label = _ref2.label,
          isSelected = _ref2.isSelected;

      var action = function action() {
        layerConfigChange(layers[2], {
          isVisible: !layers[2].config.isVisible
        });
      };

      var buttonStyle = isSelected ? _customPanelStyle["default"].button.selected : _customPanelStyle["default"].button;
      return /*#__PURE__*/_react["default"].createElement("button", {
        style: buttonStyle,
        onClick: action
      }, label);
    };

    return /*#__PURE__*/_react["default"].createElement("div", {
      style: _customPanelStyle["default"].container
    }, /*#__PURE__*/_react["default"].createElement("p", {
      style: _customPanelStyle["default"].title
    }, "Use the timeline or choose keywords to filter the projects."), filters.map(function (filter) {
      return Button(filter);
    }), /*#__PURE__*/_react["default"].createElement(ToggleButton, {
      label: "Related links",
      isSelected: layers[2].config.isVisible
    }), /*#__PURE__*/_react["default"].createElement("button", {
      style: _customPanelStyle["default"].removeButton,
      onClick: removeFilters
    }, " Remove filters "), /*#__PURE__*/_react["default"].createElement("img", {
      style: _customPanelStyle["default"].logo,
      width: "160",
      height: "25",
      alt: "logo",
      src: 'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F4%2F41%2FProhelvetia_Logo.svg%2F1134px-Prohelvetia_Logo.svg.png&f=1&nofb=1'
    }));
  };

  CustomPanels.defaultProps = {
    // provide a list of additional panels
    panels: [{
      id: 'predefined-filters',
      label: 'Filters',
      iconComponent: _icons.FilterFunnel
    } // {
    //   id: 'chart',
    //   label: 'Chart',
    //   iconComponent: Icons.LineChart
    // }
    ],
    // prop selector from side panel props
    getProps: function getProps(sidePanelProps) {
      return {};
    }
  };
  return CustomPanels;
}

var _default = CustomPanelsFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,